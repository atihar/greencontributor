<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\ProductCategory;
use App\Models\Product;
use Illuminate\Support\Facades\Auth;

use Illuminate\Support\Str;
use Carbon\Carbon;
use Illuminate\Support\Facades\Storage;

class ProductsController extends BlendxController
{
    public static function create(Request $request, $model, $id)
    {
        $product_categories = ProductCategory::all();
        return view('backend.product.create', ['product_categories' => $product_categories]);
    }


    public static function store(Request $request, $model, $id)
    {
        $request->merge([
            'user_id' => Auth::user()->id
        ]);
        return parent::store($request, $model, $id); // TODO: Change the autogenerated stub
    }

    public static function edit(Request $request, $model, $id){
        $old = Product::find($id);
        $product_categories = ProductCategory::all();
        return view('backend.product.edit',['old'=>$old,'product_categories'=>$product_categories]);
    }

    public static function update($request, $model, $id){
        $product = Product::find($id);
        $product->title = $request->title;
        $product->product_category_id = $request->product_category_id;
        $product->short_description = $request->short_description;
        $product->long_description = $request->long_description;
        $product->user_id = Auth::user()->id;
        $product->price = $request->price;
        $product->commission = $request->commission;

        if ($request->hasFile('featured_image')) {
            
            $file = $request->file('featured_image');
            $filename = $file->getClientOriginalName();
            $name = pathinfo($filename, PATHINFO_FILENAME);
            $name = Str::camel($name);
            $extension = pathinfo($filename, PATHINFO_EXTENSION);
            $filename_to_save = $name . time() . "." . $extension;

            if ($product->featured_image) {
                $storage_path = str_replace('storage','public',$product->featured_image);
                Storage::delete($storage_path);
            }

            try{
                $file->storeAs('public/files', $filename_to_save);
                $product->featured_image = 'storage/files/'.$filename_to_save;
            }catch(\Exception $e){
                array_push($errors, $e->getMessage());
            }
        }
        try{
            $product->save();
            return redirect('dashboard/product');
        }catch(\Exception $e){
            dd($e->getMessage());
            return redirect()->back()->with('error', $e->getMessage());
        }

    }


    public static function delete($request, $model, $id){
        $product = Product::find($id);
        if ($product->featured_image) {
            // changing path of the image
            $storage_path = str_replace('storage','public',$product->featured_image);

            //deleting form storage
            Storage::delete($storage_path);
        }
        $product->delete();
        return redirect('dashboard/product');
    }
}
